{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const slice = createSlice({\n  name: \"counter\",\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to 'mutate' the state. It doesn't actually\n      // mutate the state because it uses the immer library, which detects\n      // changes to a \"draft state\" and produces a brand new immutable state\n      // based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload.amount;\n    }\n  }\n});\nexport const selectCount = state => state.counter.value;\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = slice.actions;\nexport default slice.reducer;","map":{"version":3,"sources":["/Users/scottgemmell/Github/recipes-collector/src/features/counter/counterSlice.js"],"names":["createSlice","slice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","amount","selectCount","counter","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,KAAK,GAAGD,WAAW,CAAC;AAChCE,EAAAA,IAAI,EAAE,SAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACbC,IAAAA,KAAK,EAAE;AADM,GAFkB;AAKhCC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACrB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACA,KAPQ;AAQTI,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACA,KAVQ;AAWTK,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACrCH,MAAAA,KAAK,CAACH,KAAN,IAAeM,MAAM,CAACC,OAAP,CAAeC,MAA9B;AACA;AAbQ;AALsB,CAAD,CAAzB;AAsBP,OAAO,MAAMC,WAAW,GAAGN,KAAK,IAAIA,KAAK,CAACO,OAAN,CAAcV,KAA3C;AACP,OAAO,MAAM;AAAEE,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CR,KAAK,CAACc,OAA1D;AAEP,eAAed,KAAK,CAACe,OAArB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const slice = createSlice({\r\n\tname: \"counter\",\r\n\tinitialState: {\r\n\t\tvalue: 0,\r\n\t},\r\n\treducers: {\r\n\t\tincrement: (state) => {\r\n\t\t\t// Redux Toolkit allows us to 'mutate' the state. It doesn't actually\r\n\t\t\t// mutate the state because it uses the immer library, which detects\r\n\t\t\t// changes to a \"draft state\" and produces a brand new immutable state\r\n\t\t\t// based off those changes\r\n\t\t\tstate.value += 1;\r\n\t\t},\r\n\t\tdecrement: (state) => {\r\n\t\t\tstate.value -= 1;\r\n\t\t},\r\n\t\tincrementByAmount: (state, action) => {\r\n\t\t\tstate.value += action.payload.amount;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const selectCount = state => state.counter.value;\r\nexport const { increment, decrement, incrementByAmount } = slice.actions;\r\n\r\nexport default slice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}